

==================================
저장한 시간: 2025-03-17 오후 5:39:44 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include "save.h"

//[문제] random한 int값 1000개를 출력하라


//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++) 
		std::cout << (int)((float)rand() / RAND_MAX * 1000) << "\t";
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 5:45:16 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include "save.h"

//[문제] random한 int값 1000개를 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid;

//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++) 
		std::cout << uid(dre) << "\t";
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 5:45:50 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include "save.h"

//[문제] random한 int값 1000개를 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해 값을 일정하게

//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++) 
		std::cout << uid(dre) << "\t";
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 5:48:50 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include "save.h"

//[문제] random한 int값 1000개를 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid{ 0, 9999'9999 }; // 범위를 지정해보기

//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++) 
		std::print("{:10}", uid(dre));	// 파이썬 느낌나는 함수
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 5:49:07 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include "save.h"

//[문제] random한 int값 1000개를 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid{ 0, 9999'9999 }; // 범위를 지정해보기

//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++)
		std::print("{:20}", uid(dre));
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 5:50:06 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include "save.h"

//[문제] random한 int값 1000개를 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid{ 0, 9999'9999 }; // 범위를 지정해보기

//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++)
		std::print("{:<20}", uid(dre));		// < > 로 정렬 방향, :뒤 숫자로 데이터를 찍어줄 간격 지정함
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 5:50:48 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include "save.h"

//[문제] random한 int값 1000개를 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid{ 0, 9999'9999 }; // 범위를 지정해보기

//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++)
		std::print("{:^20}", uid(dre));		// < ^ > 로 정렬 방향, :뒤 숫자로 데이터를 찍어줄 간격 지정함
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 5:51:19 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include "save.h"

//[문제] random한 int값 1000개를 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid{ 0, 9999'9999 }; // 범위를 지정해보기

//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++)
		std::print("{:^20}", uid(dre));		// <, ^(당근이라고 부름), > 로 정렬 방향, :뒤 숫자로 데이터를 찍어줄 간격 지정함
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 5:51:44 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include "save.h"

//[문제] random한 int값 1000개를 출력하라
std::mt19937_64 dre;
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

//----------------
int main()
//----------------
{
	srand(time(NULL));

	for (int i = 0; i < 1'000; i++)
		std::print("{:8}", uid(dre));		// 우리가 사용할 기준
	std::cout << std::endl;
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 6:25:47 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include <array>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 1000개를 메모리에 저장하라
// 저장한 값 중에서 가장 큰 값이 무엇인지 찾아 화면에 출력하라
// 출력된 값을 답안지에도 써라

//----------------
int main()
//----------------
{

	// 내 코드
	{
		std::vector<int> v; // 역시나 뒤지게 비효율적이다
		int max = 0;
		for (int i = 0; i < 1'000; i++)
		{
			v.push_back(uid(dre));

			if (v[v.size() - 1] > max) // 저장도 전에 하셨으니 빵점
				max = v[v.size() - 1];
		}

		for (int i = 0; i < 1'000; i++)
			std::print("{:8}", v[i]);
		std::cout << std::endl;

		std::cout << max << std::endl;
	}


	//교수님 코드1
	{
		std::array<int , 1'000> arr;	// T[N] --> arr<T, N>!!!


		for (int i = 0; i < 1000; i++)
			arr[i] = uid(dre);

		int maxValue{ std::numeric_limits<int>::min() };
		for (int i = 0; i < 1000; ++i) {
			if (maxValue < arr[i])
				maxValue = arr[i];
		}

		std::cout << maxValue << std::endl;
	}
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 6:26:58 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include <array>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 1000개를 메모리에 저장하라
// 저장한 값 중에서 가장 큰 값이 무엇인지 찾아 화면에 출력하라
// 출력된 값을 답안지에도 써라

//----------------
int main()
//----------------
{

	// 내 코드
	{
		std::vector<int> v; // 역시나 뒤지게 비효율적이다
		int max = 0;
		for (int i = 0; i < 1'000; i++)
		{
			v.push_back(uid(dre));

			if (v[v.size() - 1] > max) // 저장도 전에 하셨으니 빵점
				max = v[v.size() - 1];
		}

		for (int i = 0; i < 1'000; i++)
			std::print("{:8}", v[i]);
		std::cout << std::endl;

		std::cout << max << std::endl;
	}


	//교수님 코드1
	{
		std::array<int , 1'000> arr;	// T[N] --> arr<T, N>!!!
		

		for (int i = 0; i < 1000; i++)
			arr[i] = uid(dre);

		int maxValue{ std::numeric_limits<int>::min() };
		for (int i = 0; i < 1000; ++i) {
			if (maxValue < arr[i])
				maxValue = arr[i];
		}

		std::cout << maxValue << std::endl;
	}
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 6:29:06 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include <array>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 1000개를 메모리에 저장하라
// 저장한 값 중에서 가장 큰 값이 무엇인지 찾아 화면에 출력하라
// 출력된 값을 답안지에도 써라

//----------------
int main()
//----------------
{

	// 내 코드
	{
		std::vector<int> v; // 역시나 뒤지게 비효율적이다
		int max = 0;
		for (int i = 0; i < 1'000; i++)
		{
			v.push_back(uid(dre));

			if (v[v.size() - 1] > max) // 저장도 전에 하셨으니 빵점
				max = v[v.size() - 1];
		}

		for (int i = 0; i < 1'000; i++)
			std::print("{:8}", v[i]);
		std::cout << std::endl;

		std::cout << max << std::endl;
	}


	//교수님 코드1
	{
		std::array<int , 1'000> arr;	// T[N] --> arr<T, N>!!!
		

		for (int i = 0; i < arr.size(); i++)	// 1000 --> magic number(1000이 뭘 의미하는지 몰랑), hard-wired coding(수정이 번거로운 딱딱한 코드)
		// 1차로 size 넣은 수정안
			arr[i] = uid(dre);

		int maxValue{ std::numeric_limits<int>::min() };
		for (int i = 0; i < 1000; ++i) {
			if (maxValue < arr[i])
				maxValue = arr[i];
		}

		std::cout << maxValue << std::endl;
	}
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 6:31:38 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include <array>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 1000개를 메모리에 저장하라
// 저장한 값 중에서 가장 큰 값이 무엇인지 찾아 화면에 출력하라
// 출력된 값을 답안지에도 써라

//----------------
int main()
//----------------
{

	//교수님 코드
	{
		std::array<int , 1'000> arr;	// T[N] --> arr<T, N>!!!
		

		for (int& num : arr)	// 종속 없이 매우 손쉽게 arr로 넣어줌, 여기선 &붙일 것
			num = uid(dre);

		int maxValue{ std::numeric_limits<int>::min() };
		for (int num : arr) {		// 특정 상황에 종속되지 않는 코드
			if (maxValue < num)
				maxValue = num;
		}

		std::cout << maxValue << std::endl;
	}
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 6:42:57 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include <array>
#include <algorithm>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 1000개를 메모리에 저장하라
// 저장한 값 중에서 가장 큰 값이 무엇인지 찾아 화면에 출력하라
// 출력된 값을 답안지에도 써라

//----------------
int main()
//----------------
{

	//교수님 코드
	{
		std::array<int , 1'000> arr;	// T[N] --> arr<T, N>!!!
		

		for (int& num : arr)	// 종속 없이 매우 손쉽게 arr로 넣어줌, 여기선 &붙일 것
			num = uid(dre);


		// 최댓값을 찾는 알고리즘 - O(N) --> 이미 있는걸 왜 니가 만들고 자빠졌는가

		auto pos = std::max_element(arr.begin(), arr.end());
		//_Fwdlt -> generic. 여기선 구간을 정해주기 _Pr -> 제일 큰 값이라는게 뭐임>
		// _ExPo && --> 코어를 싱글로 할거야 더 늘릴거야?
		// 이 함수는 가장 큰수를 가리키는 작대기를 리턴

		std::cout << "Max" << *pos << std::endl;	// 작대기라면 포인터처럼 역참조해도 되겠네!

		//std::cout << maxValue << std::endl;
	}
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 6:44:11 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <print>			//C++23
#include <array>
#include <algorithm>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 1000개를 메모리에 저장하라
// 저장한 값 중에서 가장 큰 값이 무엇인지 찾아 화면에 출력하라
// 출력된 값을 답안지에도 써라

//----------------
int main()
//----------------
{

	//교수님 코드
	{
		std::array<int , 1'000> arr;	// T[N] --> arr<T, N>!!!
		

		for (int& num : arr)	// 종속 없이 매우 손쉽게 arr로 넣어줌, 여기선 &붙일 것
			num = uid(dre);


		// 최댓값을 찾는 알고리즘 - O(N) --> 이미 있는걸 왜 니가 만들고 자빠졌는가

		//_Fwdlt -> generic. 여기선 구간을 정해주기 _Pr -> 제일 큰 값이라는게 뭐임>
		// _ExPo && --> 코어를 싱글로 할거야 더 늘릴거야?
		// 이 함수는 가장 큰수를 가리키는 작대기를 리턴

		std::cout << "Max: " << *std::max_element(arr.begin(), arr.end()) << std::endl;	// 작대기라면 포인터처럼 역참조해도 되겠네!

		//std::cout << maxValue << std::endl;
	}
	
	save("메인.cpp");
}

==================================
저장한 시간: 2025-03-17 오후 6:53:11 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <fstream>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 100개를 파일 "int 1000개.txt"에 저장하라 - txt로 int save
// 저장한 파일은 사림이 읽을 수 있어야 한다
// 나중에 파일에서 int값을 읽어올 수 있어야 한다

//----------------
int main()
//----------------
{
	{
		std::ofstream out{ "int 1000개.txt" };

		for (int i = 0; i < 1'000; ++i)
			out << uid(dre);
	}
	
	save("메인.cpp");
}


==================================
저장한 시간: 2025-03-17 오후 6:56:41 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <fstream>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 100개를 파일 "int 1000개.txt"에 저장하라 - txt로 int save
// 저장한 파일은 사림이 읽을 수 있어야 한다
// 나중에 파일에서 int값을 읽어올 수 있어야 한다

//----------------
int main()
//----------------
{
	{
		std::ofstream out{ "int 1000개.txt" }; // ofstream은 못읽으면 새로 만듬

		for (int i = 0; i < 1'000; ++i)
			out << uid(dre) << " "; // 값과 값 사이를 구분해준다 해서 '구분자(delimeter)'
	}
	
	save("메인.cpp");
}


==================================
저장한 시간: 2025-03-17 오후 6:59:00 월요일
==================================

/*--------------------------------
// 2025학년도 1학기 STL 월910수910 
// 3월 17일 월요일
// 2주 2일
---------------------------------*/


/*-------------------------------------------------
// 많은 수의 자료를 다루기 - int 
--------------------------------------------------*/


#include <iostream>
#include <random>
#include <fstream>
#include <print>
#include "save.h"

std::default_random_engine dre{}; 
// random_device{}() -> 단순히 ()만이 아니라 {}을 붙여 생성을 하고 호출할 것
std::uniform_int_distribution uid{ 0, 999'9999 }; // 범위를 지정해보기

// [문제] 랜덤 int값 100개를 파일 "int 1000개.txt"에 저장하라 - txt로 int save
// 저장한 파일은 사림이 읽을 수 있어야 한다
// 나중에 파일에서 int값을 읽어올 수 있어야 한다

//----------------
int main()
//----------------
{
	{
		std::ofstream out{ "int 1000개.txt" }; // ofstream은 못읽으면 새로 만듬

		int cnt{};
		for (int i = 0; i < 1'000; ++i) {
			std::print(out, "{:8}", uid(dre));
			if( 0 == (++cnt % 10))
				out << std::endl;
		}
	}
	
	save("메인.cpp");
}
